
variables:
  CMAKEVER: 3.15
  CMAKEREV: 4

jobs:
- job: Ubuntu_1804_gcc
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - template: ci/azure-pipelines/docker.yml
    parameters:
      imageName: 'gdal-bionic'
      dockerFile: Dockerfile-bionic
      scriptFile: linux-run.sh
      environmentVariables: |
        CC=gcc
        CXX=g++
        LANG=C.UTF-8
        BUILD_TYPE=Debug
        CMAKE_OPTIONS=-C/src/configurations/full_drivers.cmake

- job: Ubuntu_1804_clang
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - template: ci/azure-pipelines/docker.yml
      parameters:
        imageName: 'gdal-bionic'
        dockerFile: Dockerfile-bionic
        scriptFile: linux-run.sh
        environmentVariables: |
          CC=clang-8
          CXX=clang++-8
          LANG=C.UTF-8
          BUILD_TYPE=Debug
          CMAKE_OPTIONS=-C/src/configurations/full_drivers.cmake

- job: MinGW
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - template: ci/azure-pipelines/docker.yml
      parameters:
        imageName: 'gdal-bionic'
        dockerFile: Dockerfile-bionic
        scriptFile: mingw-run.sh
        environmentVariables: |
          CXX=x86_64-w64-mingw32-g++-posix
          CC=x86_64-w64-mingw32-gcc-posix
          LANG=C.UTF-8
          BUILD_TYPE=Debug
          CMAKE_OPTIONS=-C/src/configurations/full_drivers.cmake

#- job: Android
#  pool:
#    vmImage: 'ubuntu-16.04'
#  steps:
#    - template: ci/azure-pipelines/android.yml
#      parameters:
#        ANDROID_NDK: android-ndk-r17b
#        CONFIGURATIONS: $(Build.SourcesDirectory)/configurations/android.cmake
#        ANDROID_TOOLCHAIN: clang

- job: macOS
  pool:
    vmImage: 'macOS-10.13'
  steps:
    - template: ci/azure-pipelines/osx.yml
      parameters:
        CONFIGURATIONS: $(Build.SourcesDirectory)/configurations/osx.cmake

- job: Windows32
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    SDK: release-1911
    SDK_ROOT: $(Build.BinariesDirectory)\$(SDK)
  steps:
    - template: ci/azure-pipelines/windows.yml
      parameters:
        sdk: $(SDK)
        SDK_ZIP: $(SDK)-dev.zip
        generator: Visual Studio 15 2017
        architecture: x86
        CMAKE_OPTIONS: -DIconv_ROOT=$(SDK_ROOT) -DPROJ_ROOT=$(SDK_ROOT) -DHDF4_ROOT=$(SDK_ROOT) -DGIF_ROOT=$(SDK_ROOT) -DPNG_ROOT=$(SDK_ROOT) -DJPEG_ROOT=$(SDK_ROOT) -DGEOS_ROOT=$(SDK_ROOT) -DPostgreSQL_ROOT=$(SDK_ROOT) -DCURL_ROOT=$(SDK_ROOT) -DXercesC_ROOT=$(SDK_ROOT) -DEXPAT_ROOT=$(SDK_ROOT) -DPoppler_ROOT=$(SDK_ROOT) -DOpenJPEG_ROOT=$(SDK_ROOT) -DECW_ROOT=$(SDK_ROOT) -DHDF5_ROOT=$(SDK_ROOT) -DKEA_ROOT=$(SDK_ROOT) -DNetCDF_ROOT=$(SDK_ROOT) -DLibXml2_ROOT=$(SDK_ROOT) -DOpenSSL_ROOT=$(SDK_ROOT) -DTIFF_ROOT=$(SDK_ROOT) -DZLIB_ROOT=$(SDK_ROOT)
        CONFIGURATIONS: $(Build.SourcesDirectory)/configurations/windows.cmake

- job: Windows64
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    SDK: release-1911-x64
    SDK_ROOT: $(Build.BinariesDirectory)\$(SDK)
  steps:
    - template: ci/azure-pipelines/windows.yml
      parameters:
        sdk: $(SDK)
        SDK_ZIP: $(SDK)-dev.zip
        generator: Visual Studio 15 2017 Win64
        architecture: x64
        CMAKE_OPTIONS: -DIconv_ROOT=$(SDK_ROOT) -DHDF4_ROOT=$(SDK_ROOT) -DGIF_ROOT=$(SDK_ROOT) -DPNG_ROOT=$(SDK_ROOT) -DJPEG_ROOT=$(SDK_ROOT) -DGEOS_ROOT=$(SDK_ROOT) -DPostgreSQL_ROOT=$(SDK_ROOT) -DCURL_ROOT=$(SDK_ROOT) -DXercesC_ROOT=$(SDK_ROOT) -DEXPAT_ROOT=$(SDK_ROOT) -DOpenJPEG_ROOT=$(SDK_ROOT) -DECW_ROOT=$(SDK_ROOT) -DHDF5_ROOT=$(SDK_ROOT) -DKEA_ROOT=$(SDK_ROOT) -DNetCDF_ROOT=$(SDK_ROOT) -DLibXml2_ROOT=$(SDK_ROOT) -DOpenSSL_ROOT=$(SDK_ROOT) -DTIFF_ROOT=$(SDK_ROOT) -DZLIB_ROOT=$(SDK_ROOT)
        CONFIGURATIONS: $(Build.SourcesDirectory)/configurations/windows.cmake

steps:
- powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
  displayName: Add conda to PATH
- script: |
    conda create --yes --quiet --name myEnvironment
  displayName: Create Anaconda environment
- script: |
    call activate myEnvironment
    conda install --yes --quiet --name myEnvironment -c conda-forge python=3.7 proj cmake swig numpy pytest
    python3 -m pip install -U pip wheel setuptools numpy
    python3 -m pip install -r $(Build.BinariesDirectory)/gdal/autotest/requirements.txt
  displayName: Install python and dependency packages
- script: |
    cinst -y --no-progress 7zip wget git
    cd $(Build.BinariesDirectory)
    wget -q http://download.gisinternals.com/sdk/downloads/${{parameters.sdk}}-dev.zip
    7z x ${{parameters.sdk}}-dev.zip
    rm ${{parameters.sdk}}/include/gdal*.h
    rm ${{parameters.sdk}}/lib/gdal_i.lib
    rm ${{parameters.sdk}}/include/ogr*.h
  displayName: Install sdk
- script: |
    cd $(Build.BinariesDirectory)
    mkdir build
    git clone --depth 1 https://github.com/osgeo/gdal.git
    git clone $(Build.SourcesDirectory) $(Build.BinariesDirectory)\gdal\cmake4gdal
    call activate myEnvironment
    python $(Build.BinariesDirectory)/gdal/cmake4gdal/deploy.py
  displayName: clone gdal and deploy cmake scripts
- script: |
    call activate myEnvironment
    echo "##vso[task.setvariable variable=additionalOptions]-DPython_FIND_VIRTUALENV=ONLY -DPython_ROOT=$env:CONDA\envs\myEnvironment -DPROJ_ROOT=$env:CONDA\envs\myEnvironment\Library"
    cmake -G "${{ parameters.generator }}" $(additionalOptions) ${{ parameters.CMAKE_OPTIONS }} -C ${{ parameters.CONFIGURATIONS }} $(Build.BinariesDirectory)/gdal
  workingDirectory: '$(Build.BinariesDirectory)/build'
  displayName: configure gdal
- script: |
    call activate myEnvironment
    cmake --build $(Build.BinariesDirectory)/build --config Release
  workingDirectory: '$(Build.BinariesDirectory)/build'
  displayName: build gdal
- script: |
    call activate myEnvironment
    cmake --build $(Build.BinariesDirectory)/build --config Release --target quicktest
  workingDirectory: '$(Build.BinariesDirectory)/build'
  displayName: run quicktest
#- script: |
#    call activate myEnvironment
#    cmake --build $(Build.BinariesDirectory)/build --config Release --target autotest
#  workingDirectory: '$(Build.BinariesDirectory)/build'
#  displayName: run autotest

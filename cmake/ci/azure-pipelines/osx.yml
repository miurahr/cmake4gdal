steps:
- script: $(Build.SourcesDirectory)/gdal/ci/azure-pipelines/osx-install.sh
  displayName: install brew packages
- script: ls /usr/local/opt
  displayName: list brew packages installed
- task: CMake@1
  displayName: configure gdal
  inputs:
      workingDirectory: '$(Build.BinariesDirectory)/build'
      cmakeArgs: -DGDAL_USE_GIFLIB_INTERNAL=YES -DCFITSIO_ROOT=/usr/local/Cellar/cfitsio/3.450_1 -DPROJ_ROOT=/usr/local/Cellar/proj/5.2.0 -DLibXml2_ROOT=/usr/local/opt/libxml2 -DSPATIALITE_ROOT=/usr/local/opt/libspatialite/ -DPostgreSQL_ROOT=/usr/local/opt/libpq/ -DEXPAT_ROOT=/usr/local/opt/expat/ -DSQLite3_ROOT=/usr/local/opt/sqlite/ -DOpenSSL_ROOT=/usr/local/opt/openssl -DPNG_ROOT=/usr/local/Cellar/libpng/1.6.36 -DJPEG_ROOT=/usr/local/Cellar/jpeg/9c -DOpenJPEG_ROOT=/usr/local/Cellar/openjpeg/2.3.0 -DCMAKE_BUILD_TYPE=Debug -C${{parameters.CONFIGURATIONS}} -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-gdal -DSWIG_PYTHON=ON $(Build.SourcesDirectory)

- task: CMake@1
  displayName: build gdal
  inputs:
      workingDirectory: '$(Build.BinariesDirectory)/build'
      cmakeArgs: --build $(Build.BinariesDirectory)/build
- task: CMake@1
  displayName: run quicktest
  inputs:
      workingDirectory: '$(Build.BinariesDirectory)/build'
      cmakeArgs: --build $(Build.BinariesDirectory)/build --target quicktest
- task: CMake@1
  displayName: install gdal
  inputs:
      workingDirectory: '$(Build.BinariesDirectory)/build'
      cmakeArgs: --build $(Build.BinariesDirectory)/build --target install

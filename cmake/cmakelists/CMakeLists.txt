# ******************************************************************************
# * Project:  CMake4GDAL
# * Purpose:  CMake build scripts
# * Author: Dmitriy Baryshnikov (aka Bishop), polimax@mail.ru, Hiroshi Miura
# ******************************************************************************
# * Copyright (C) 2017,2018 Hiroshi Miura
# *
# * Permission is hereby granted, free of charge, to any person obtaining a
# * copy of this software and associated documentation files (the "Software"),
# * to deal in the Software without restriction, including without limitation
# * the rights to use, copy, modify, merge, publish, distribute, sublicense,
# * and/or sell copies of the Software, and to permit persons to whom the
# * Software is furnished to do so, subject to the following conditions:
# *
# * The above copyright notice and this permission notice shall be included
# * in all copies or substantial portions of the Software.
# *
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# * DEALINGS IN THE SOFTWARE.
# ******************************************************************************

cmake_minimum_required (VERSION 3.5)
cmake_policy(SET CMP0023 NEW)
cmake_policy(SET CMP0025 NEW)
cmake_policy(SET CMP0033 NEW)
cmake_policy(SET CMP0034 NEW)
cmake_policy(SET CMP0037 NEW)
cmake_policy(SET CMP0038 NEW)
cmake_policy(SET CMP0039 NEW)
cmake_policy(SET CMP0040 NEW)
cmake_policy(SET CMP0041 NEW)
cmake_policy(SET CMP0042 NEW)
cmake_policy(SET CMP0044 NEW)
cmake_policy(SET CMP0046 NEW)
cmake_policy(SET CMP0048 NEW)
cmake_policy(SET CMP0050 NEW)
cmake_policy(SET CMP0054 NEW)
cmake_policy(SET CMP0057 NEW)
cmake_policy(SET CMP0058 NEW)
cmake_policy(SET CMP0062 NEW)
cmake_policy(SET CMP0064 NEW)

if (POLICY CMP0068)
    #mac os x rpath effect
    cmake_policy(SET CMP0068 NEW)
endif()
if (POLICY CMP0069)
    # INTERPROCEDURAL_OPTIMIZATION
    cmake_policy(SET CMP0069 NEW)
endif()
if (POLICY CMP0070)
    # file(GENERATE)
    cmake_policy(SET CMP0070 NEW)
endif()
if (POLICY CMP0073)
    # _LIB_DEPENDS
    cmake_policy(SET CMP0073 NEW)
endif()
if (POLICY CMP0074)
    # Packagename_ROOT
    cmake_policy(SET CMP0074 NEW)
endif()
if (POLICY CMP0075)
    cmake_policy(SET CMP0075 NEW)
endif()
if (POLICY CMP0079)
    cmake_policy(SET CMP0079 OLD)
endif()

project(gdal LANGUAGES C CXX)

# setup cmake modules paths
include(cmake/modules/init.cmake)

# cotire cmake speedup addon
include(cotire)

set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Configs" FORCE)

# template files path
set(GDAL_CMAKE_TEMPLATE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/template)

################################################################
# Custom global properties
define_property(GLOBAL PROPERTY GDAL_FORMATS
                BRIEF_DOCS "Builtin format"
                FULL_DOCS "Builtin format"
                )
define_property(GLOBAL PROPERTY OGR_FORMATS
                BRIEF_DOCS "Builtin ogr drivers"
                FULL_DOCS "Builtin ogr drivers"
                )
define_property(GLOBAL PROPERTY PLUGIN_MODULES
                BRIEF_DOCS "Plugin modules"
                FULL_DOCS "Plugin modules"
                )
define_property(TARGET PROPERTY PLUGIN_OUTPUT_DIR
                BRIEF_DOCS "Plugin modules build directories"
                FULL_DOCS "Plugin modules build directories"
                )

################################################################
# check compiler and set preferences.
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(CMAKE_COMPILER_IS_GNUCXX)
    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    if (GCC_VERSION VERSION_GREATER 5.1 OR GCC_VERSION VERSION_EQUAL 5.1)
        message(STATUS "GNU C++ 5.1 or later detected. It uses C++11 New ABI.")
        set(GNUCXX_NEW_ABI true)
    endif()
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wno-unused-command-line-argument)
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()

if(MSVC)
    set(CMAKE_DEBUG_POSTFIX "d")
    add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -wd4127 -wd4251 -wd4275 -wd4786 -wd4100 -wd4245 -wd4206 -wd4018 -wd4389")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -wd4127 -wd4251 -wd4275 -wd4786 -wd4100 -wd4245 -wd4206 -wd4018 -wd4389")
    add_definitions(-DNOMINMAX)
endif()

include(CheckCompilerMachineOption)
include(CheckCompilerSIMDFeature)

if("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(x86|AMD64)")
  set(ARCH_FLAG)
  check_compiler_machine_option(flag SSE)
  list(APPEND ARCH_FLAG ${flag})
  check_compiler_machine_option(flag SSSE3)
  list(APPEND ARCH_FLAG ${flag})
  check_compiler_machine_option(flag AVX)
  list(APPEND ARCH_FLAG ${flag})

  check_compiler_simd_feature(RESULT res FLAG ${ARCH_FLAG} QUERY HAVE_SSE)
  set(HAVE_SSE_AT_COMPILE_TIME ${res})
  check_compiler_simd_feature(RESULT res FLAG ${ARCH_FLAG} QUERY HAVE_SSSE3)
  set(HAVE_SSSE3_AT_COMPILE_TIME ${res})
  check_compiler_simd_feature(RESULT res FLAG ${ARCH_FLAG} QUERY HAVE_AVX)
  set(HAVE_AVX_AT_COMPILE_TIME ${res})
endif()

################################################################
option(CLANG_TIDY_ENABLED "Run clang-tidy with the compiler." OFF)
set(CLANG_TIDY_CHECKS "-*,clang-analyzer-alpha.unix.cstring.*" CACHE STRING "clang-tidy checks")
set(CLANG_TIDY_WARNINGS_AS_ERRORS "clang-analyzer-alpha.unix.cstring.*" CACHE STRING "clang-tidy warnings as errors.")
if(RUN_CLANG_TIDY)
  if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
    message(FATAL_ERROR "RUN_CLANG_TIDY requires an out-of-source build!")
  endif()
  find_program(CLANG_TIDY_COMMAND NAMES clang-tidy)
  if(NOT CLANG_TIDY_COMMAND)
    message(WARNING "RUN_CLANG_TIDY is ON but clang-tidy is not found!")
    set(CMAKE_CXX_CLANG_TIDY "" CACHE STRING "" FORCE)
  else()
    set(CMAKE_CXX_CLANG_TIDY "${CLANG_TIDY_COMMAND};-checks='${CLANG_TIDY_CHECKS}';-header-filter='${CMAKE_SOURCE_DIR}/gdal/*';-warnings-as-errors='${CLANG_TIDY_WARNINGS_AS_ERRORS}'")
  endif()
endif()

################################################################
add_subdirectory(gdal)

add_subdirectory(autotest/cpp)

# please comment out if you want to exclude autotest from distribution.
add_subdirectory(autotest)

# Google OSS-Fuzz project utilities
add_subdirectory(gdal/fuzzers)
# Google OSS-Fuzz tests
add_subdirectory(gdal/fuzzers/tests)

# vim: ts=4 sw=4 sts=4 et

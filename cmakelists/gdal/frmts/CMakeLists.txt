# CMake4GDAL project is distributed under X/MIT license. See accompanying file LICENSE.txt.

add_library(gdal_frmts OBJECT gdalallregister.cpp)
include(GdalDriverHelper)
include(CMakeDependentOption)

# base driver provide frmt core functions
gdal_format(raw "Raw formats:EOSAT FAST Format, FARSITE LCP and Vexcel MFF2 Image")
gdal_format(iso8211 "iso8211 library")
gdal_format(png "PNG image format")
gdal_format(jpeg "JPEG image format")
gdal_format(gtiff "GeoTIFF image format")
set_package_properties(TIFF PROPERTIES PURPOSE "gdal_GTIFF: GeoTIFF image format")
gdal_format(mem "Read/write data in Memory")
gdal_format(vrt "Virtual GDAL Datasets")
# Note: derived is derived of vrt
add_subdirectory(derived)

# default formats
gdal_format(hfa "Erdas Imagine .img")
gdal_format(sdts "SDTS translator")
gdal_format(nitf "National Imagery Transmission Format")
gdal_optional_format(ingr "Intergraph Raster Format")
set_package_properties(TIFF PROPERTIES PURPOSE "gdal_INGR: Intergraph Raster Format")
gdal_optional_format(gxf "GXF")
gdal_optional_format(aaigrid "Arc/Info ASCII Grid Format.")
gdal_optional_format(ceos "CEOS translator")
gdal_optional_format(ceos2 "ASI CEOS translator")
gdal_optional_format(xpm "XPM image format")
gdal_optional_format(dted "Military Elevation Data")
gdal_optional_format(jdem "JDEM driver")
gdal_optional_format(envisat "Envisat")
gdal_optional_format(elas "Earth Resources Laboratory Applications Software")
gdal_optional_format(fit "FIT driver")
gdal_optional_format(l1b "NOAA Polar Orbiter Level 1b Data Set (AVHRR)")
gdal_optional_format(rs2 "RS2 -- RadarSat 2 XML Product")
gdal_optional_format(ilwis "Raster Map")
gdal_optional_format(rmf "RMF --- Raster Matrix Format")
gdal_optional_format(leveller "Daylon Leveller heightfield")
gdal_optional_format(sgi "SGI Image driver")
gdal_optional_format(srtmhgt "SRTM HGT File Read Support")
gdal_optional_format(idrisi "Idrisi Raster Format")
gdal_optional_format(gsg "Implements the Golden Software Surfer 7 Binary Grid Format.")
gdal_optional_format(ers "ERMapper .ERS")
gdal_optional_format(jaxapalsar "JAXA PALSAR Level 1.1 and Level 1.5 processed products support")
gdal_optional_format(dimap "SPOT Dimap Driver")
gdal_optional_format(gff "Ground-based SAR Applitcations Testbed File Format driver")
gdal_optional_format(cosar "COSAR -- TerraSAR-X Complex SAR Data Product")
gdal_optional_format(pds "USGS Astrogeology ISIS Cube (Version 2)")
gdal_optional_format(adrg "ADRG reader and ASRP/USRP Reader")
gdal_optional_format(coasp "DRDC Configurable Airborne SAR Processor (COASP) data reader")
gdal_optional_format(tsx "TerraSAR-X XML Product Support")
gdal_optional_format(terragen "Terragen&trade; Terrain File")
gdal_optional_format(blx "Magellan BLX Topo File Format")
gdal_optional_format(msgn "Meteosat Second Generation (MSG) Native Archive Format (.nat)")
gdal_optional_format(til "EarthWatch .TIL Driver")
gdal_optional_format(r "R Object Data Store")
gdal_optional_format(northwood "NWT_GRD/NWT_GRC -- Northwood/Vertical Mapper File Format")
gdal_optional_format(saga "SAGA GIS Binary Driver")
gdal_optional_format(xyz "ASCII Gridded XYZ")
gdal_dependent_format(heif "HEIF" "HEIF_FOUND")
gdal_optional_format(esric "ESRI compact cache")
gdal_format(hf2 "HF2/HFZ heightfield raster")
gdal_format(kmlsuperoverlay "")
gdal_format(ctg "CTG driver")
gdal_format(zmap "ZMAP")
gdal_format(ngsgeoid "NOAA NGS Geoid Height Grids")
gdal_format(iris "IRIS driver")
gdal_format(map "OziExplorer .MAP")
gdal_format(cals "CALS type 1")
set_package_properties(TIFF PROPERTIES PURPOSE "gdal_CALS: CALS type 1 driver")
gdal_format(safe "SAFE -- Sentinel-1 SAFE XML Product")
gdal_format(sentinel2 "Driver for Sentinel-2 Level-1B, Level-1C and Level-2A products.")
gdal_format(prf "PHOTOMOD Raster File")
# gdal_format(mrf "Meta raster format")
gdal_format(wcs "OGC Web Coverage Service")
gdal_format(wmts "OGC Web Map Tile Service")
gdal_format(grib "WMO General Regularly-distributed Information in Binary form")
gdal_format(pcraster "PCRaster CSF 2.0 raster file driver")
gdal_format(gif "Graphics Interchange Format")
gdal_format(bmp "Microsoft Windows Device Independent Bitmap")
gdal_format(daas "Airbus DS Intelligence Data As A Service(DAAS)")
gdal_format(tga "TGA")
gdal_format(stacta "STACTA")
gdal_format(ogcapi "OGCAPI")

# optional Formats
gdal_optional_format(bsb "Maptech/NOAA BSB Nautical Chart Format")
gdal_dependent_format(aigrid "Arc/Info Binary Grid Format" "OGR_ENABLE_AVC;OGR_ENABLE_SHAPE")
gdal_optional_format(arg "ARG: Azavea Raster Grid")
gdal_optional_format(usgsdem "USGS ASCII DEM (and CDED)")
gdal_optional_format(airsar "AirSAR Polarimetric Format")
gdal_optional_format(ozi "OZF2/OZFX3 raster")
gdal_optional_format(rda "RDA (DigitalGlobe Raster Data Access)")
gdal_optional_format(sigdem "Scaled Integer Gridded DEM .sigdem Driver")
gdal_dependent_format(msg "Meteosat Second Generation" "MSG_FOUND") # FIXME: currently the build depend on copying the
                                                                    # PublicDecompSDK in frmts/msg
gdal_optional_format(rik "RIK -- Swedish Grid Maps")
gdal_optional_format(stacit "STACIT")

# formats with external library dependency
gdal_dependent_format(netcdf "NetCDF network Common Data Form" "NETCDF_FOUND")
gdal_dependent_format(eeda "Earth Engine Data API" "CURL_FOUND")
gdal_dependent_format(fits "FIT Driver" "HAVE_CFITSIO")
gdal_dependent_format(rasdaman "Rasdaman GDAL driver" "HAVE_RASDAMAN")
gdal_dependent_format(hdf5 "Hierarchical Data Format Release 5 (HDF5)" "HDF5_FOUND")
gdal_dependent_format(plmosaic "PLMosaic (Planet Labs Mosaics API)" "GDAL_USE_CURL")
gdal_dependent_format(wms "Web Map Services" "GDAL_USE_CURL")
gdal_dependent_format(gta "Generic Tagged Arrays" "HGTA_FOUND")
gdal_dependent_format(webp "WebP" "HAVE_WEBP")
gdal_dependent_format(hdf4 "Hierarchical Data Format Release 4 (HDF4)" "HDF4_FOUND;gdal_PDS")
gdal_dependent_format(pdf "Geospatial PDF" "HAVE_PDFLIB")
gdal_dependent_format(rasterlite "Rasterlite - Rasters in SQLite DB" "SQLITE3_FOUND;OGR_SQLITE")
gdal_dependent_format(mbtiles "MBTile" "HAVE_SQLITE3")
gdal_dependent_format(postgisraster "PostGIS Raster driver" "HAVE_POSTGRESQL")
gdal_dependent_format(bpg "BPG driver" "HAVE_BPG")
gdal_dependent_format(dods "OPeNDAP Grid Client" "HAVE_DAP")
gdal_dependent_format(dds "DirectDraw Surface" "HAVE_CRNLIB")
gdal_dependent_format(kea "Kea" "HAVE_KEA")
gdal_dependent_format(openjpeg "JPEG2000 driver based on OpenJPEG library" "OPENJPEG_FOUND")
gdal_dependent_format(jpegls "JPEG LS" "HAVE_CHARLS")
gdal_dependent_format(jpeg2000 "JPEG2000 --- Implementation of the JPEG-2000 part 1 (ISO/IEC 15444-1) standard"
                      "HAVE_JASPER")
gdal_dependent_format(pcidsk "PCI Geomatics Database File" "HAVE_PCIDSK")
gdal_dependent_format(tiledb "TileDB tiledb.io" "HAVE_TILEDB")
gdal_dependent_format(exr "EXR support via OpenEXR library" "OpenEXR_FOUND")
gdal_dependent_format(zarr "ZARR" "NETCDF_FOUND")

# for circulate dependency, grass is NOT always compiled in.
gdal_dependent_format(grass "GRASS" "HAVE_GRASS")
add_feature_info(gdal_GRASS GDAL_ENABLE_FRMT_GRASS "GRASS raster format")
if (GDAL_ENABLE_FRMT_GRASS)
  if (HAVE_GRASS AND HAVE_POSTGRESQL)

  else ()
    message(FATAL_ERROR "Dependency error on GRASS driver")
  endif ()
endif ()

# ######################################################################################################################
# driver with proprietary libraries Kakadu software SDK
gdal_dependent_format(jp2kak "JPEG-2000 (based on Kakadu)" "HAVE_KDU")
gdal_dependent_format(jpipkak "JPIP Streaming" "HAVE_KDU")
# Luratech SDK
gdal_dependent_format(jp2lura JP2LURA "HAVE_LURA")
# ESRI ArcSDE C API SDK
gdal_dependent_format(sde "ESRI ArcSDE Raster" "HAVE_SDE")
# LizardTech's decoding software development kit (DSDK)
gdal_dependent_format(mrsid "Multi-resolution Seamless Image Database" "HAVE_MRSID")
gdal_dependent_format(mrsid_lidar "Multi-resolution Seamless Image Database - LiDAR support" "HAVE_MRSID")
gdal_dependent_format(georaster "Oracle Spatial GeoRaster" "HAVE_ORACLE")
gdal_dependent_format(ecw "ERDAS JPEG2000 (.jp2)" "HAVE_ECW")

# Register all frmt drivers according to FRMT_<driver> flags
gdal_standard_includes(gdal_frmts)
if (ENABLE_GNM)
  target_compile_definitions(gdal_frmts PRIVATE -DGNM_ENABLED)
endif ()
target_include_directories(
  gdal_frmts PRIVATE $<TARGET_PROPERTY:gnm_frmts,SOURCE_DIR> $<TARGET_PROPERTY:gdal_vrt,SOURCE_DIR>
                     $<TARGET_PROPERTY:ogrsf_generic,SOURCE_DIR> $<TARGET_PROPERTY:ogr_MEM,SOURCE_DIR>)
target_sources(gdal PRIVATE $<TARGET_OBJECTS:gdal_frmts>)
set_property(TARGET gdal_frmts PROPERTY POSITION_INDEPENDENT_CODE ON)
